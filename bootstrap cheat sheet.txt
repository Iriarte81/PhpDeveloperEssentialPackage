BOOTSTRAP 3

click on dist folder after downloading it
you'll need the css fonts and js folders for your project

create a folder called bootstrap in your server and save these three folders there.

You'll need to download jquery and respond.js also and put it in the js folder


CHAPTER 1 – get everything in place to build a bootstrap website

<head>
	<meta name=”viewport” content=”width=device-width, initial-scale=1.0”>
	this meta tag is for responsive desgin – to scale screens correctly

	<link href=”css/bootstrap.min.css” rel=”stylesheet”>
	<link href=”css/custom.css” rel=”stylesheet”>
	create the emtpy custom.css file and add it below the bootstrap.min.css 	file.
	from github scottjehl/Respond copy the contents of respond.js and create a 	file in your 	js file
	<script src=”js/respond.js”></script>

</head>

<body>

	<script src=”http://code.jquery.com/jquery-latests.min.js”></script>
	<script src=”js/bootstrap.min.js”></script> (after jquery)

CHAPTER 2 – GRID SYSTEM


grid system .col-xs .col-sm .col-md .col-lg
.col-md-5 is larger than .col-md-4 and so on

the grids will be horizontal and stack vertically as we reduce screen size.
The larger the grid the sooner it will stack vertically as we reduce screen size.

<div class=”row”></div>

four columns going across the page as four separate boxes
we divide by twelve to figure out what number to append to col-md

<div class=”col-md-3”></div>
<div class=”col-md-3”></div>
<div class=”col-md-3”></div>
<div class=”col-md-3”></div>

as you make the page smaller the columns will stack vertically

<div class=”col-md-3 col-xs-6”></div>
<div class=”col-md-3 col-xs-6”></div>
<div class=”col-md-3 col-xs-6”></div>
<div class=”col-md-3 col-xs-6”></div>

will make the breakpoint to stack them vertically smaller and will
stack them in groups of 2 because 12/6 is 2



for the header

<div class=”col-lg-6”>
<div class=”col-lg-6”>

will display two columns
after a breakpoint (making screen smaller) will stack horizontally,
the stacking happens earlier because we use lg in the class, the smaller
the class (lg md sm xs) the later the stacking will happen.

<div class=”col-lg-6 col-sm-5”>
<div class=”col-lg-6 col-sm-7”>

as the screen is smaller the second div column will start eating more space from the first before stacking vertically 7>5 and 7>6 which would have both columns be the same width.

<div class=”container”>
(containing several row class divs)
</div>

text smashed into the sides and content is stretching to the sides of the page, with container element will give the impression of the page having fixed widths.
For each breakpoint. We get more whitespace.


Offsetting columns – having more space between two columns:

<div class=”row”>
<aside class=”col-lg-3 col-sm-4”></aside>
<aside class=”col-lg-8 col-lg-offset-1 col-sm-7 col-sm-offset-1></aside>

will ad whitespace equivalent to 1 column on the large display and equivalente also to one column on small display. Remember 3+8+1 is 12 and so must be for small display 4+7+1.

Changing column order using push and pull:

<div class=”row”>
<article class=”col-lg-offset-1 col-sm-offset-1 col-lg-8 col-sm-7 col-lg-push-3 col-sm-push-4”></aside>

we will push the article however many columns across the page depending on the size, for example on large display the article element will be pushed to the right three columns while the aside will be pulled 9 columns, and when the grid gets small the article element will be pushed four columns to the right while the aside will be pulled 8 columns to the left. In effect this allows in small displays for the aside to go on top of the article after hitting the breakpoint when the elements are stacked vertically.

<aside class=”col-lg-3 col-sm-4 col-lg-pull-9 co-sm-pull-8></aside>

we will pull it howevermany columns towards the left

</div>


Nesting Columns


At larger dimension have four divs below only one of the two divs above. So we need to nest the row below the one that already exists.


<article class=”col-lg-offset-1 col-sm-offset-1 col-lg-8 col-sm-7 col-lg-push-3 col-sm-push-4”>
<div class=”row”>
	<div class=”col-md-3 col-xs-6”></div>
	<div class=”col-md-3 col-xs-6”></div>
	<div class=”col-md-3 col-xs-6”></div>
	<div class=”col-md-3 col-xs-6”></div>
</div>
</article>
<aside class=”col-lg-3 col-sm-4 col-lg-pull-9 co-sm-pull-8></aside>


JumboTron-style layout

<div class=”jumbotron”></div>
	<img src=”img/jumbotron.jpg” alt=”” class=”pull-right”></img>
</div>

will display a jumbotron div with an image stacked in the same row to the right of the page.


Typography

<div class=”row”>
	<p><blockquote>
	</blockquote>
	</p>
</div>


<footer class=”row”>
	<p><small>
	</small></p>
	<p><small>
	</small></p>
</footer>

use small tag for “fine print”


.hidden and .visible

<div class=”col-lg-6 col-sm-7”>
	<img src=”img/animals.jpg” alt=”” class=”hidden-xs”>
</div>

hidden-xs, hidden-sm, hidden-md, and hidden-lg hide an image only
at those particular displays, whereas visible-xs, visible-sm, visible-md
and visible-lg show an image or element only at those displays
hiding them at any other display size


Styling buttons using btn classes

<p><a href=”#” class=”btn btn-default”></a></p>

btn btn-primary – a blue button
btn btn-warning btn-lg – an large orange button
btn btn-success btn-xs – an extra small green button
btn btn-danger btn-block – button will be as wide as containing
element and it will be red


Styling images

making images responsive:

<img src=”img/logo.png” alt=”Wisdom Pets” class=”img-responsive”>

decorative classes:

<img src=”img/logo.png” alt=”Wisdom Pets” class=”img-responsive img-circle”>
makes the image oval

<img src=”img/logo.png” alt=”Wisdom Pets” class=”img-responsive img-rounded”>
gives rounded corners on the image

img-responsive img-thumbnail
will put a grey border on a responsive image (good for white images)


Icons

<div class=”col-md-3 col-xs-6”>
	<h4><span class=”glyphicon glyphicon-pushpin”></span>Title</h4>

glyphicon glyphicon-ok
glyphicon glyphicon-cutlery
glyphicon glyphicon-heart

put spaces on your text inside the h4 tag before Title to give it space between the glyphicon and the font.


Thumbnail Gallery

lay out a thumbnail gallery using the grid, .thumbnail and .caption

<div class=”row”>
	<div class=”col-xs-6”>
		<div class=”thumbnail”>
			<img src=”img/dog1.jpg” alt=”” class=”img-responsive”>
		<p class=”caption”>text</p>
		</div>
	</div>
	<div class=”col-xs-6”>
		<div class=”thumbnail”>
		<img src=”img/dog1.jpg” alt=”” class=”img-responsive”>
		<p class=”caption”>text</p>
	</div>
</div>
<div class “row”>
	<div class=”col-xs-6”>
		<div class=”thumbnail”>
		<img src=”img/dog1.jpg” alt=”” class=”img-responsive”>
		<p class=”caption”>text</p>
	</div>
	<div class=”col-xs-6”>
		<div class=”thumbnail”>
		<img src=”img/dog1.jpg” alt=”” class=”img-responsive”>
		<p class=”caption”>text</p>
	</div>
</div>
	<div class=”col-xs-6”>
		<img src=”img/dog1.jpg” alt=”” class=”img-responsive”>
		<p>text</p>
	</div>
</div>

Styling Tabular Data

<table class=”table”>
	<thead>
		<tr>
			<th></th>
			<th></th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>

.table on the table tag to make a table

table table-striped (will create a striped table)
table table-bordered (will give you a spreadsheet look on the table)
table table-hover (shade when hovering)
table table-condensed (less padding on the table)

in a div around the table <div class=”table-responsive”><table>...</table></div>
to make the table responsive


Overriding core CSS with custom styles


<link href=”css/bootstrap.min.css” rel=”stylesheet”>
do not make custom styles on bootstrap file because when it
updates our custom styles will be wiped out
<link href=”css/custom.css” rel=”stylesheet”>


/* in custom stylesheet */

footer {
	padding: 2em 0;
	margin: 3em 0;
	border-top: 1px solid #ddd;
	color: #999;
}

say you want to change the glyphicon stylesheet

.glyphicon {
	color: #cdae51;
}

.glyphicon-pushpin,
.glyphicon-heart {
	color: #39eej9;
}

for 

<span class=”glyhpicon glyphicon-pushpin”>


give breathing room between text and pushed image to the right

maybe i want all images pulled right and responsive

.pull-right.imgresponsive (there is no space it is all one word)
this reads tags that have those two classes as opposed to nested classes

.pull-right-img-responsive {
	margin: 0 0 1em 1em;
}



 another thing we might want to override a boootstrap style

.btn-info {
	background-color: #cdae51;
	border-color: #3F2BD1;
}

when you don't know where to track within bootstrap what's changing our tag elements

use firebug – install firebug – add to firefox – install or use the developer
tool with chrome

select the element, on the righthand style menu you can see what's controlling
the color of an element like a button and copy and paste into our
custom.css and override the properties we want.


Panels

make different boxes of different sizes into thumbnails to prevent responsive alignment problems as they stack vertically

<div class=”clearfix visible-xs visible-lg”></div>
<div class=”row”>
	<div class=”col-lg-3 col-xs-6”
		<div class=”thumbnail”>
			<div class=”caption”>
clearfix will keep boxes ordered, notice clearfix class
is not wrapping the whole thing


to create a panel:

<div class=”panel panel-default”>
	<div class=”panel-body”>
	</div>
</div>


